// <auto-generated />
using System;
using MiGuachincheWeb.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace MiGuachincheWeb.Migrations
{
    [DbContext(typeof(guachincheContext))]
    [Migration("20230508141535_modelAdd")]
    partial class modelAdd
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.15")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "27402d78-a987-438f-a4df-3884633b951a",
                            ConcurrencyStamp = "5ded6073-515f-4f28-8930-a4c1a0821244",
                            Name = "Default",
                            NormalizedName = "DEFAULT"
                        },
                        new
                        {
                            Id = "cfca3dac-e77f-46ef-b720-72494df08f62",
                            ConcurrencyStamp = "b2fd87bb-9ec4-4869-ab77-6a0f13cb5a95",
                            Name = "Manager",
                            NormalizedName = "MANAGER"
                        },
                        new
                        {
                            Id = "c674eca3-6b26-4840-b76f-0403d136a2e5",
                            ConcurrencyStamp = "52ccb179-41e3-45f0-b7cc-112d47ba692c",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "93c890cb-8693-4321-8073-6483f59cb28d",
                            RoleId = "c674eca3-6b26-4840-b76f-0403d136a2e5"
                        },
                        new
                        {
                            UserId = "9e148492-0392-44ed-a1f7-91239d86b406",
                            RoleId = "cfca3dac-e77f-46ef-b720-72494df08f62"
                        },
                        new
                        {
                            UserId = "b24fd563-79b5-4d27-abed-bb34d1756a5f",
                            RoleId = "27402d78-a987-438f-a4df-3884633b951a"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("MiGuachincheWeb.Models.CustomUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("Apelllidos")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Nombre")
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Telefono")
                        .HasMaxLength(9)
                        .HasColumnType("nvarchar(9)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool?>("isActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "93c890cb-8693-4321-8073-6483f59cb28d",
                            AccessFailedCount = 0,
                            Apelllidos = "Bartolome Navarro",
                            ConcurrencyStamp = "4c2ee536-5c55-43b7-9375-a658ff48b8da",
                            Email = "Admin@guachinche.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            Nombre = "Cesar",
                            NormalizedEmail = "ADMIN@GUACHINCHE.COM",
                            NormalizedUserName = "ADMIN@GUACHINCHE.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEL5p7Rz0WbGe0HeO7JT/SDm8gnafR5WQv6RHZqGl7cnCBk4j0NyUNOGCp1uSR8C0OQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "48607bc9-67bc-4e55-ad80-ac871ec42187",
                            Telefono = "922111333",
                            TwoFactorEnabled = false,
                            UserName = "Admin@guachinche.com",
                            isActive = true
                        },
                        new
                        {
                            Id = "9e148492-0392-44ed-a1f7-91239d86b406",
                            AccessFailedCount = 0,
                            Apelllidos = "Guachinche",
                            ConcurrencyStamp = "a3226d5a-2d35-4b90-9e1c-908428f4f2fa",
                            Email = "Manager@guachinche.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            Nombre = "Manager",
                            NormalizedEmail = "MANAGER@GUACHINCHE.COM",
                            NormalizedUserName = "MANAGER@GUACHINCHE.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEEqYdw6NGKargh/nFC9SMwRgJ5bUNJ43wGDB5xE8rijxOVu69tj5kDoR24qvjnOe/A==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "ee101bec-f15b-469d-a500-30bb2c49f8cd",
                            Telefono = "922000111",
                            TwoFactorEnabled = false,
                            UserName = "Manager@guachinche.com",
                            isActive = true
                        },
                        new
                        {
                            Id = "b24fd563-79b5-4d27-abed-bb34d1756a5f",
                            AccessFailedCount = 0,
                            Apelllidos = "Guachinche",
                            ConcurrencyStamp = "084c57f0-5fea-4347-a3c8-0736e918d3ca",
                            Email = "User@guachinche.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            Nombre = "User",
                            NormalizedEmail = "USER@GUACHINCHE.COM",
                            NormalizedUserName = "USER@GUACHINCHE.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEIKv+Qt1TaiV5pTqo+aC12Jex47aCvuZWPQvXmLSqGMB2LBTx0p8R3ERP3+6NxwmAA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "2c99be1e-6bbc-4592-ba97-d0be42d0f8c2",
                            Telefono = "922456789",
                            TwoFactorEnabled = false,
                            UserName = "User@guachinche.com",
                            isActive = true
                        });
                });

            modelBuilder.Entity("MiGuachincheWeb.Models.EstadoReserva", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("estadoReservas");

                    b.HasData(
                        new
                        {
                            Id = -1,
                            Name = "Activa"
                        },
                        new
                        {
                            Id = -2,
                            Name = "Cancelada"
                        },
                        new
                        {
                            Id = -3,
                            Name = "Finalizada"
                        });
                });

            modelBuilder.Entity("MiGuachincheWeb.Models.Plato", b =>
                {
                    b.Property<int>("PlatoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PlatoId"), 1L, 1);

                    b.Property<string>("Descripcion")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("tipoId")
                        .HasColumnType("int");

                    b.HasKey("PlatoId");

                    b.HasIndex(new[] { "tipoId" }, "ifk_PlatoTipo");

                    b.ToTable("plato", (string)null);
                });

            modelBuilder.Entity("MiGuachincheWeb.Models.PlatoRestaurante", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"), 1L, 1);

                    b.Property<int?>("PlatoId")
                        .HasColumnType("int");

                    b.Property<int?>("RestauranteId")
                        .HasColumnType("int");

                    b.Property<bool>("activo")
                        .HasColumnType("bit");

                    b.Property<int>("plato_Id")
                        .HasColumnType("int");

                    b.Property<int>("restaurante_Id")
                        .HasColumnType("int");

                    b.Property<int?>("valoracion")
                        .HasColumnType("int");

                    b.HasKey("id");

                    b.HasIndex("PlatoId");

                    b.HasIndex("RestauranteId");

                    b.ToTable("plato_restaurantes");
                });

            modelBuilder.Entity("MiGuachincheWeb.Models.Reserva", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("FechaReserva")
                        .HasColumnType("datetime2");

                    b.Property<string>("customerUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("estadoReservaId")
                        .HasColumnType("int");

                    b.Property<int>("restauranteId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("customerUserId");

                    b.HasIndex("estadoReservaId");

                    b.HasIndex("restauranteId");

                    b.ToTable("Reservas");
                });

            modelBuilder.Entity("MiGuachincheWeb.Models.Restaurante", b =>
                {
                    b.Property<int>("RestauranteId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RestauranteId"), 1L, 1);

                    b.Property<int>("Id_tipo")
                        .HasColumnType("int");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Rest_Url")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("telefono")
                        .HasMaxLength(9)
                        .IsUnicode(false)
                        .HasColumnType("char(9)")
                        .IsFixedLength();

                    b.Property<int?>("valoracion")
                        .HasColumnType("int");

                    b.Property<int>("zonaId")
                        .HasColumnType("int");

                    b.HasKey("RestauranteId");

                    b.HasIndex(new[] { "Id_tipo" }, "ifk_restTipoRest");

                    b.HasIndex(new[] { "zonaId" }, "ifk_zonaRest");

                    b.ToTable("restaurante", (string)null);
                });

            modelBuilder.Entity("MiGuachincheWeb.Models.Tipo", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"), 1L, 1);

                    b.Property<string>("nombre")
                        .IsRequired()
                        .HasMaxLength(40)
                        .IsUnicode(false)
                        .HasColumnType("varchar(40)");

                    b.HasKey("id");

                    b.ToTable("tipo", (string)null);
                });

            modelBuilder.Entity("MiGuachincheWeb.Models.TipoRestaurante", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"), 1L, 1);

                    b.Property<string>("nombre")
                        .IsRequired()
                        .HasMaxLength(40)
                        .IsUnicode(false)
                        .HasColumnType("varchar(40)");

                    b.HasKey("id");

                    b.ToTable("tipoRestaurante", (string)null);
                });

            modelBuilder.Entity("MiGuachincheWeb.Models.UserPlatoRestaurante", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"), 1L, 1);

                    b.Property<string>("custom_userId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("plato_restaurante_Id")
                        .HasColumnType("int");

                    b.Property<int?>("plato_restauranteid")
                        .HasColumnType("int");

                    b.Property<string>("usuario_Id")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.HasIndex("custom_userId");

                    b.HasIndex("plato_restauranteid");

                    b.ToTable("userPlatoRestaurante");
                });

            modelBuilder.Entity("MiGuachincheWeb.Models.UserRestaurante", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"), 1L, 1);

                    b.Property<int?>("RestauranteId")
                        .HasColumnType("int");

                    b.Property<string>("customUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("restaurante_Id")
                        .HasColumnType("int");

                    b.Property<string>("usuario_Id")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.HasIndex("RestauranteId");

                    b.HasIndex("customUserId");

                    b.ToTable("userRestaurantes");
                });

            modelBuilder.Entity("MiGuachincheWeb.Models.Zona", b =>
                {
                    b.Property<int>("Zona_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Zona_id"), 1L, 1);

                    b.Property<string>("descripcion")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.Property<string>("nombre")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("Zona_id")
                        .HasName("PK__zona__CD7EA2967C6981B9");

                    b.ToTable("zona", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("MiGuachincheWeb.Models.CustomUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("MiGuachincheWeb.Models.CustomUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MiGuachincheWeb.Models.CustomUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("MiGuachincheWeb.Models.CustomUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MiGuachincheWeb.Models.Plato", b =>
                {
                    b.HasOne("MiGuachincheWeb.Models.Tipo", "tipo")
                        .WithMany("platos")
                        .HasForeignKey("tipoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_tipo");

                    b.Navigation("tipo");
                });

            modelBuilder.Entity("MiGuachincheWeb.Models.PlatoRestaurante", b =>
                {
                    b.HasOne("MiGuachincheWeb.Models.Plato", "plato")
                        .WithMany()
                        .HasForeignKey("PlatoId");

                    b.HasOne("MiGuachincheWeb.Models.Restaurante", "restaurante")
                        .WithMany()
                        .HasForeignKey("RestauranteId");

                    b.Navigation("plato");

                    b.Navigation("restaurante");
                });

            modelBuilder.Entity("MiGuachincheWeb.Models.Reserva", b =>
                {
                    b.HasOne("MiGuachincheWeb.Models.CustomUser", "CustomUser")
                        .WithMany("reservas")
                        .HasForeignKey("customerUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_user_reservas");

                    b.HasOne("MiGuachincheWeb.Models.EstadoReserva", "estado")
                        .WithMany("listaReservas")
                        .HasForeignKey("estadoReservaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_estado_reserva");

                    b.HasOne("MiGuachincheWeb.Models.Restaurante", "restaurante")
                        .WithMany("reservas")
                        .HasForeignKey("restauranteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_reserva_restaurante");

                    b.Navigation("CustomUser");

                    b.Navigation("estado");

                    b.Navigation("restaurante");
                });

            modelBuilder.Entity("MiGuachincheWeb.Models.Restaurante", b =>
                {
                    b.HasOne("MiGuachincheWeb.Models.TipoRestaurante", "Id_tipoNavigation")
                        .WithMany("restaurantes")
                        .HasForeignKey("Id_tipo")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_tipoRest");

                    b.HasOne("MiGuachincheWeb.Models.Zona", "zona")
                        .WithMany("restaurantes")
                        .HasForeignKey("zonaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_zona");

                    b.Navigation("Id_tipoNavigation");

                    b.Navigation("zona");
                });

            modelBuilder.Entity("MiGuachincheWeb.Models.UserPlatoRestaurante", b =>
                {
                    b.HasOne("MiGuachincheWeb.Models.CustomUser", "custom_user")
                        .WithMany()
                        .HasForeignKey("custom_userId");

                    b.HasOne("MiGuachincheWeb.Models.PlatoRestaurante", "plato_restaurante")
                        .WithMany()
                        .HasForeignKey("plato_restauranteid");

                    b.Navigation("custom_user");

                    b.Navigation("plato_restaurante");
                });

            modelBuilder.Entity("MiGuachincheWeb.Models.UserRestaurante", b =>
                {
                    b.HasOne("MiGuachincheWeb.Models.Restaurante", "restaurante")
                        .WithMany()
                        .HasForeignKey("RestauranteId");

                    b.HasOne("MiGuachincheWeb.Models.CustomUser", "customUser")
                        .WithMany()
                        .HasForeignKey("customUserId");

                    b.Navigation("customUser");

                    b.Navigation("restaurante");
                });

            modelBuilder.Entity("MiGuachincheWeb.Models.CustomUser", b =>
                {
                    b.Navigation("reservas");
                });

            modelBuilder.Entity("MiGuachincheWeb.Models.EstadoReserva", b =>
                {
                    b.Navigation("listaReservas");
                });

            modelBuilder.Entity("MiGuachincheWeb.Models.Restaurante", b =>
                {
                    b.Navigation("reservas");
                });

            modelBuilder.Entity("MiGuachincheWeb.Models.Tipo", b =>
                {
                    b.Navigation("platos");
                });

            modelBuilder.Entity("MiGuachincheWeb.Models.TipoRestaurante", b =>
                {
                    b.Navigation("restaurantes");
                });

            modelBuilder.Entity("MiGuachincheWeb.Models.Zona", b =>
                {
                    b.Navigation("restaurantes");
                });
#pragma warning restore 612, 618
        }
    }
}
