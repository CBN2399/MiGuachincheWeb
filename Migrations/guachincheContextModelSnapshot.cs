// <auto-generated />
using System;
using MiGuachincheWeb.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace MiGuachincheWeb.Migrations
{
    [DbContext(typeof(guachincheContext))]
    partial class guachincheContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.15")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "00779b1d-a5b9-4157-8738-426f4772dc01",
                            ConcurrencyStamp = "576e25df-4b75-4f52-90b8-3bdbcc268055",
                            Name = "Default",
                            NormalizedName = "DEFAULT"
                        },
                        new
                        {
                            Id = "795f1789-d547-4049-a3a6-f36c2b37b634",
                            ConcurrencyStamp = "94459d6b-2b79-466e-b113-6e2aad932414",
                            Name = "Manager",
                            NormalizedName = "MANAGER"
                        },
                        new
                        {
                            Id = "0b1c6815-a61d-4a6a-b418-fc5adf1618c4",
                            ConcurrencyStamp = "039c0974-d4b1-4832-bdfb-4acccb48dfad",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "7f9d80ae-6de1-4000-aed7-0bff629569b3",
                            RoleId = "0b1c6815-a61d-4a6a-b418-fc5adf1618c4"
                        },
                        new
                        {
                            UserId = "d39e0a79-81a8-452c-a661-9c5c2d356e77",
                            RoleId = "795f1789-d547-4049-a3a6-f36c2b37b634"
                        },
                        new
                        {
                            UserId = "3c1f6f95-f964-4cac-a304-13745015c28a",
                            RoleId = "00779b1d-a5b9-4157-8738-426f4772dc01"
                        },
                        new
                        {
                            UserId = "b48e2be9-bbd2-47dc-a4cc-8990b48a38e5",
                            RoleId = "00779b1d-a5b9-4157-8738-426f4772dc01"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("MiGuachincheWeb.Models.CustomUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("Apelllidos")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Telefono")
                        .IsRequired()
                        .HasMaxLength(9)
                        .HasColumnType("nvarchar(9)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool?>("isActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "7f9d80ae-6de1-4000-aed7-0bff629569b3",
                            AccessFailedCount = 0,
                            Apelllidos = "Bartolome Navarro",
                            ConcurrencyStamp = "320a961e-9616-4d51-88e8-6c6097ff61c4",
                            Email = "Admin@guachinche.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            Nombre = "Cesar",
                            NormalizedEmail = "ADMIN@GUACHINCHE.COM",
                            NormalizedUserName = "ADMIN@GUACHINCHE.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEB491q/O8dkFxx53S48B0dOLRcPMdQeK2jbtuUs3e/fmljEVSea5hAF06XOb7dK5sQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "8d22f184-18d8-4bee-81da-c7bfeac2a5dd",
                            Telefono = "922111333",
                            TwoFactorEnabled = false,
                            UserName = "Admin@guachinche.com",
                            isActive = true
                        },
                        new
                        {
                            Id = "d39e0a79-81a8-452c-a661-9c5c2d356e77",
                            AccessFailedCount = 0,
                            Apelllidos = "Guachinche",
                            ConcurrencyStamp = "f04bf3bd-5bda-4ec2-b2e9-6626b01942a3",
                            Email = "Manager@guachinche.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            Nombre = "Manager",
                            NormalizedEmail = "MANAGER@GUACHINCHE.COM",
                            NormalizedUserName = "MANAGER@GUACHINCHE.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEEzKJGzNDbvG6rC196rnIWHDeGxfDPbOWqRB1uu+jVQNnZg1x7R15FwySlfpnYjHdA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "ddacf5a4-7114-4199-b672-91481dbc5837",
                            Telefono = "922000111",
                            TwoFactorEnabled = false,
                            UserName = "Manager@guachinche.com",
                            isActive = true
                        },
                        new
                        {
                            Id = "3c1f6f95-f964-4cac-a304-13745015c28a",
                            AccessFailedCount = 0,
                            Apelllidos = "Guachinche",
                            ConcurrencyStamp = "c0bdc75f-43f5-478e-8ff2-815092ba34ef",
                            Email = "User@guachinche.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            Nombre = "User",
                            NormalizedEmail = "USER@GUACHINCHE.COM",
                            NormalizedUserName = "USER@GUACHINCHE.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEB4+7jBCuuzuDSSN8tvQoMCKLBC05jq/9nVsaaptkzNHwP/iRDYvu7EKWcSyeJMvXA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "332f5ef0-2c25-452c-99d0-e25eb6c1c2de",
                            Telefono = "922456789",
                            TwoFactorEnabled = false,
                            UserName = "User@guachinche.com",
                            isActive = true
                        },
                        new
                        {
                            Id = "b48e2be9-bbd2-47dc-a4cc-8990b48a38e5",
                            AccessFailedCount = 0,
                            Apelllidos = "Guachinche",
                            ConcurrencyStamp = "b5cebe83-bc83-4611-9d8a-ac2db32b8e4d",
                            Email = "User2@guachinche.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            Nombre = "User2",
                            NormalizedEmail = "USER2@GUACHINCHE.COM",
                            NormalizedUserName = "USER2@GUACHINCHE.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAED2cAGqiUVPR1tX/o+Uv9ZIEvfvKU1UBqq54V3guznpJgnStFaMMyzzXk0Mg5hhC0Q==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "b2bc47b3-fbcf-4ffd-aa4a-1f5af1ff15ea",
                            Telefono = "1111111",
                            TwoFactorEnabled = false,
                            UserName = "Use2@guachinche.com",
                            isActive = true
                        });
                });

            modelBuilder.Entity("MiGuachincheWeb.Models.EstadoReserva", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("estadoReservas");

                    b.HasData(
                        new
                        {
                            Id = -1,
                            Name = "Activa"
                        },
                        new
                        {
                            Id = -2,
                            Name = "Cancelada"
                        },
                        new
                        {
                            Id = -3,
                            Name = "Finalizada"
                        });
                });

            modelBuilder.Entity("MiGuachincheWeb.Models.plato", b =>
                {
                    b.Property<int>("PlatoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PlatoId"), 1L, 1);

                    b.Property<string>("Descripcion")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("tipoId")
                        .HasColumnType("int");

                    b.HasKey("PlatoId");

                    b.HasIndex(new[] { "tipoId" }, "ifk_PlatoTipo");

                    b.ToTable("plato", (string)null);
                });

            modelBuilder.Entity("MiGuachincheWeb.Models.plato_restaurante", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"), 1L, 1);

                    b.Property<bool>("activo")
                        .HasColumnType("bit");

                    b.Property<int>("plato_Id")
                        .HasColumnType("int");

                    b.Property<int>("restaurante_Id")
                        .HasColumnType("int");

                    b.Property<int?>("valoracion")
                        .HasColumnType("int");

                    b.HasKey("id");

                    b.HasIndex("plato_Id");

                    b.HasIndex("restaurante_Id");

                    b.ToTable("plato_restaurante", (string)null);
                });

            modelBuilder.Entity("MiGuachincheWeb.Models.Reserva", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("CustomUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("FechaReserva")
                        .HasColumnType("datetime2");

                    b.Property<int>("RestauranteId")
                        .HasColumnType("int");

                    b.Property<int>("estadoId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CustomUserId");

                    b.HasIndex("RestauranteId");

                    b.HasIndex("estadoId");

                    b.ToTable("Reservas");
                });

            modelBuilder.Entity("MiGuachincheWeb.Models.restaurante", b =>
                {
                    b.Property<int>("RestauranteId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RestauranteId"), 1L, 1);

                    b.Property<int>("Id_tipo")
                        .HasColumnType("int");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Rest_Url")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("telefono")
                        .HasMaxLength(9)
                        .IsUnicode(false)
                        .HasColumnType("char(9)")
                        .IsFixedLength();

                    b.Property<int?>("valoracion")
                        .HasColumnType("int");

                    b.Property<int>("zonaId")
                        .HasColumnType("int");

                    b.HasKey("RestauranteId");

                    b.HasIndex(new[] { "Id_tipo" }, "ifk_restTipoRest");

                    b.HasIndex(new[] { "zonaId" }, "ifk_zonaRest");

                    b.ToTable("restaurante", (string)null);
                });

            modelBuilder.Entity("MiGuachincheWeb.Models.tipo", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"), 1L, 1);

                    b.Property<string>("nombre")
                        .IsRequired()
                        .HasMaxLength(40)
                        .IsUnicode(false)
                        .HasColumnType("varchar(40)");

                    b.HasKey("id");

                    b.ToTable("tipo", (string)null);
                });

            modelBuilder.Entity("MiGuachincheWeb.Models.tipoRestaurante", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"), 1L, 1);

                    b.Property<string>("nombre")
                        .IsRequired()
                        .HasMaxLength(40)
                        .IsUnicode(false)
                        .HasColumnType("varchar(40)");

                    b.HasKey("id");

                    b.ToTable("tipoRestaurante", (string)null);
                });

            modelBuilder.Entity("MiGuachincheWeb.Models.zona", b =>
                {
                    b.Property<int>("Zona_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Zona_id"), 1L, 1);

                    b.Property<string>("descripcion")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)");

                    b.Property<string>("nombre")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("Zona_id")
                        .HasName("PK__zona__CD7EA2967C6981B9");

                    b.ToTable("zona", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("MiGuachincheWeb.Models.CustomUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("MiGuachincheWeb.Models.CustomUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MiGuachincheWeb.Models.CustomUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("MiGuachincheWeb.Models.CustomUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MiGuachincheWeb.Models.plato", b =>
                {
                    b.HasOne("MiGuachincheWeb.Models.tipo", "tipo")
                        .WithMany("platos")
                        .HasForeignKey("tipoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_tipo");

                    b.Navigation("tipo");
                });

            modelBuilder.Entity("MiGuachincheWeb.Models.plato_restaurante", b =>
                {
                    b.HasOne("MiGuachincheWeb.Models.plato", "plato")
                        .WithMany("plato_restaurantes")
                        .HasForeignKey("plato_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_plato");

                    b.HasOne("MiGuachincheWeb.Models.restaurante", "restaurante")
                        .WithMany("plato_restaurantes")
                        .HasForeignKey("restaurante_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_restaurante");

                    b.Navigation("plato");

                    b.Navigation("restaurante");
                });

            modelBuilder.Entity("MiGuachincheWeb.Models.Reserva", b =>
                {
                    b.HasOne("MiGuachincheWeb.Models.CustomUser", "CustomUser")
                        .WithMany("reservas")
                        .HasForeignKey("CustomUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MiGuachincheWeb.Models.restaurante", "restaurante")
                        .WithMany("reservas")
                        .HasForeignKey("RestauranteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MiGuachincheWeb.Models.EstadoReserva", "estado")
                        .WithMany()
                        .HasForeignKey("estadoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CustomUser");

                    b.Navigation("estado");

                    b.Navigation("restaurante");
                });

            modelBuilder.Entity("MiGuachincheWeb.Models.restaurante", b =>
                {
                    b.HasOne("MiGuachincheWeb.Models.tipoRestaurante", "Id_tipoNavigation")
                        .WithMany("restaurantes")
                        .HasForeignKey("Id_tipo")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_tipoRest");

                    b.HasOne("MiGuachincheWeb.Models.zona", "zona")
                        .WithMany("restaurantes")
                        .HasForeignKey("zonaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_zona");

                    b.Navigation("Id_tipoNavigation");

                    b.Navigation("zona");
                });

            modelBuilder.Entity("MiGuachincheWeb.Models.CustomUser", b =>
                {
                    b.Navigation("reservas");
                });

            modelBuilder.Entity("MiGuachincheWeb.Models.plato", b =>
                {
                    b.Navigation("plato_restaurantes");
                });

            modelBuilder.Entity("MiGuachincheWeb.Models.restaurante", b =>
                {
                    b.Navigation("plato_restaurantes");

                    b.Navigation("reservas");
                });

            modelBuilder.Entity("MiGuachincheWeb.Models.tipo", b =>
                {
                    b.Navigation("platos");
                });

            modelBuilder.Entity("MiGuachincheWeb.Models.tipoRestaurante", b =>
                {
                    b.Navigation("restaurantes");
                });

            modelBuilder.Entity("MiGuachincheWeb.Models.zona", b =>
                {
                    b.Navigation("restaurantes");
                });
#pragma warning restore 612, 618
        }
    }
}
